// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

//TODO Implement Location related things to history

// automatically added
model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    history       History[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id   String @id @default(cuid())
    name String
    description String?
    
    item Item?

    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId Int?

    @@index([name])
}

model Item {
    id           Int    @id @default(autoincrement())
    serialNumber String @unique @default(cuid())

    history History[]

    product   Product @relation(fields: [productId], references: [id])
    productId String  @unique

    location   Location? @relation(fields: [locationId], references: [id])
    locationId Int?      @unique

    @@index([serialNumber])
}

model Category {
    id   Int    @id @default(autoincrement())
    name String

    products Product[]

    @@index([name])
}

model History {
    id          Int     @id @default(autoincrement())
    title       String
    description String?

    updatedAt  DateTime @default(now())
    editedBy   User?    @relation(fields: [editedById], references: [id])
    editedById String?

    item   Item @relation(fields: [itemId], references: [id])
    itemId Int

    @@index([title])
}

model Location {
    id             Int          @id @default(autoincrement())
    name           String
    adress         Adress?
    items          Item[]
    vehicles       Vehicle[]
    locationType   LocationType @relation(fields: [locationTypeId], references: [id])
    locationTypeId Int

    @@index([name])
}

model Adress {
    id         Int      @id @default(autoincrement())
    adress     String
    postal     String
    city       String
    phone      String
    location   Location @relation(fields: [locationId], references: [id])
    locationId Int      @unique

    @@index([adress, city, postal])
}

model LocationType {
    id   Int    @id @default(autoincrement())
    type String

    Location Location[]

    @@index([type])
}

model Vehicle {
    id          Int      @id @default(autoincrement())
    location    Location @relation(fields: [location_id], references: [id])
    location_id Int      @unique
    plate       String
    desciption  String?

    @@index([plate])
}
